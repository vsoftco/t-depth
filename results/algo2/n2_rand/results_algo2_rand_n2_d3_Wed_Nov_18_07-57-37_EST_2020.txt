Algorithm 2
n = 2
IN: sde = 6
IN: max T-depth target = 3
------------------
PARENT LEVEL i: 1
# of parent hyper-nodes: 1
Parent hyper-node (T-path): 0
	1 nodes (unitaries)
Computing the children nodes...
Sorted parents by size: [(0,1)]
	Computing children of parent hyper-node: 0 [size: 1]
Number of children nodes (USH size): 122
Now displaying the children nodes, unfiltered (SH): 
	(sde=6, delta_ham=-1, T_path=2) | count=8
	(sde=4, delta_ham=-1, T_path=2) | count=4
	(sde=7, delta_ham=1, T_path=2) | count=20
	(sde=6, delta_ham=1, T_path=1) | count=2
	(sde=7, delta_ham=1, T_path=1) | count=20
	(sde=6, delta_ham=1, T_path=2) | count=16
	(sde=8, delta_ham=1, T_path=2) | count=44
	(sde=7, delta_ham=0, T_path=1) | count=4
	(sde=5, delta_ham=-1, T_path=1) | count=4
Children hyper-nodes before filtering (the P set): 2 1 
Children hyper-nodes after filtering (the P set): 2 
Minimal elements (filtered): 
	(sde=4, delta_ham=-1, T_path=2) | count=4
Filtering the children nodes in all children hyper-nodes...
Number of children nodes after filtering (size of G): 4
------------------
PARENT LEVEL i: 2
# of parent hyper-nodes: 1
Parent hyper-node (T-path): 2
	4 nodes (unitaries)
Computing the children nodes...
Sorted parents by size: [(2,4)]
	Computing children of parent hyper-node: 2 [size: 4]
Number of children nodes (USH size): 488
Now displaying the children nodes, unfiltered (SH): 
	(sde=2, delta_ham=-1, T_path=4) | count=8
	(sde=3, delta_ham=-1, T_path=3) | count=16
	(sde=5, delta_ham=1, T_path=3) | count=96
	(sde=4, delta_ham=-1, T_path=4) | count=24
	(sde=4, delta_ham=1, T_path=3) | count=8
	(sde=6, delta_ham=1, T_path=4) | count=204
	(sde=4, delta_ham=0, T_path=4) | count=60
	(sde=5, delta_ham=1, T_path=4) | count=72
Children hyper-nodes before filtering (the P set): 4 3 
Children hyper-nodes after filtering (the P set): 4 
Minimal elements (filtered): 
	(sde=2, delta_ham=-1, T_path=4) | count=8
Filtering the children nodes in all children hyper-nodes...
Number of children nodes after filtering (size of G): 8
------------------
PARENT LEVEL i: 3
# of parent hyper-nodes: 1
Parent hyper-node (T-path): 4
	8 nodes (unitaries)
Computing the children nodes...
Sorted parents by size: [(4,8)]
	Computing children of parent hyper-node: 4 [size: 8]
------------------
OUT:
T-depth: 3
T-path: 6
C0 sde: 0
Is C0 identity: false
Filtered G nodes per hyper-tree level: [4 8]
Max. num. nodes per hyper-tree level: 8
Avg. num. nodes: 6
Took: 66 ms
