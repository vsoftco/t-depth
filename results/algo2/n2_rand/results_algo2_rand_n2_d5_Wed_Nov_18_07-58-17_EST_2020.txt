Algorithm 2
n = 2
IN: sde = 2
IN: max T-depth target = 5
------------------
PARENT LEVEL i: 1
# of parent hyper-nodes: 1
Parent hyper-node (T-path): 0
	1 nodes (unitaries)
Computing the children nodes...
Sorted parents by size: [(0,1)]
	Computing children of parent hyper-node: 0 [size: 1]
Number of children nodes (USH size): 122
Now displaying the children nodes, unfiltered (SH): 
	(sde=2, delta_ham=-1, T_path=2) | count=12
	(sde=4, delta_ham=1, T_path=2) | count=56
	(sde=3, delta_ham=1, T_path=2) | count=24
	(sde=3, delta_ham=1, T_path=1) | count=18
	(sde=3, delta_ham=-1, T_path=1) | count=12
Children hyper-nodes before filtering (the P set): 2 1 
Children hyper-nodes after filtering (the P set): 2 1 
Minimal elements (filtered): 
	(sde=2, delta_ham=-1, T_path=2) | count=12
	(sde=3, delta_ham=-1, T_path=1) | count=12
Filtering the children nodes in all children hyper-nodes...
Number of children nodes after filtering (size of G): 24
------------------
PARENT LEVEL i: 2
# of parent hyper-nodes: 2
Parent hyper-node (T-path): 2
	12 nodes (unitaries)
Parent hyper-node (T-path): 1
	12 nodes (unitaries)
Computing the children nodes...
Sorted parents by size: [(2,12) (1,12)]
	Computing children of parent hyper-node: 2 [size: 12]
------------------
OUT:
T-depth: 2
T-path: 4
C0 sde: 0
Is C0 identity: false
Filtered G nodes per hyper-tree level: [24]
Max. num. nodes per hyper-tree level: 24
Avg. num. nodes: 24
Took: 14 ms
